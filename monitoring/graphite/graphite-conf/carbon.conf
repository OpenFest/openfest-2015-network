[aggregator:top]
# filesystem organization
GRAPHITE_ROOT = /opt/graphite
GRAPHITE_CONF_DIR = /opt/graphite/conf
CONF_DIR = /opt/graphite/conf
GRAPHITE_STORAGE_DIR = /opt/graphite/storage
PID_DIR = /run/graphite
LOG_DIR = /var/log/graphite
LOCAL_DATA_DIR = /opt/graphite/storage
USER = graphite

# listeners
# echo ... | telnet
LINE_RECEIVER_INTERFACE = 127.0.0.1
LINE_RECEIVER_PORT = 10001
# programatic
PICKLE_RECEIVER_INTERFACE = 127.0.0.1
PICKLE_RECEIVER_PORT = 10101

#UDP Listener
ENABLE_UDP_LISTENER = True
UDP_RECEIVER_INTERFACE = 127.0.0.1
UDP_RECEIVER_PORT = 10001

# log connections?
LOG_LISTENER_CONNECTIONS = True

# how to relay: rules|consistent-hashing|aggregated-consistent-hashing
RELAY_METHOD = consistent-hashing
REPLICATION_FACTOR = 1

AGGREGATION_RULES = aggregation-rules.conf
REWRITE_RULES = rewrite-rules.conf
FORWARD_ALL = True

DESTINATIONS = 127.0.0.1:2004:a

# tuning/queue/capacity
# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = 20000
# This is the percentage that the queue must be empty before it will accept
# more messages.  For a larger site, if the queue is very large it makes sense
# to tune this to allow for incoming stats.  So if you have an average
# flow of 100k stats/minute, and a MAX_QUEUE_SIZE of 3,000,000, it makes sense
# to allow stats to start flowing when you've cleared the queue to 95% since
# you should have space to accommodate the next minute's worth of stats
# even before the relay incrementally clears more of the queue
QUEUE_LOW_WATERMARK_PCT = 0.8

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below QUEUE_LOW_WATERMARK_PCT * MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = True

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = carbon
CARBON_METRIC_INTERVAL = 10

[cache:a]
# filesystem organization
GRAPHITE_ROOT = /opt/graphite
GRAPHITE_CONF_DIR = /opt/graphite/conf
CONF_DIR = /opt/graphite/conf
GRAPHITE_STORAGE_DIR = /opt/graphite/storage
PID_DIR = /run/graphite
LOG_DIR = /var/log/graphite
LOCAL_DATA_DIR = /opt/graphite/storage
USER = graphite

# cache / mem sizing
MAX_CACHE_SIZE = 500000
MAX_UPDATES_PER_SECOND = 500
MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = 1500
MAX_CREATES_PER_MINUTE = 120
# WHISPER_SPARSE_CREATE = False
# delegate creation work to kernel (if available) falls back on posix calls
WHISPER_FALLOCATE_CREATE = True
# if running on shared disk and multiple caches write to same file
# WHISPER_LOCK_WRITES = False

# listeners
LINE_RECEIVER_INTERFACE = localhost
LINE_RECEIVER_PORT = 2003
ENABLE_UDP_LISTENER = False
UDP_RECEIVER_INTERFACE = localhost
UDP_RECEIVER_PORT = 2003
PICKLE_RECEIVER_INTERFACE = localhost
PICKLE_RECEIVER_PORT = 2004
# interface for bulk queries
CACHE_QUERY_INTERFACE = localhost
CACHE_QUERY_PORT = 2005

#some logging
LOG_LISTENER_CONNECTIONS = True
LOG_UPDATES = True
LOG_CACHE_HITS = False
LOG_CACHE_QUEUE_SORTS = False

CACHE_WRITE_STRATEGY = sorted
WHISPER_AUTOFLUSH = False

CARBON_METRIC_PREFIX = carbon
CARBON_METRIC_INTERVAL = 10
